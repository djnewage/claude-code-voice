#!/usr/bin/env bash

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
readonly VERSION="0.1.0"
readonly PROGRAM_NAME="claude-voice"

readonly DEFAULT_CONFIG_DIR="${HOME}/.config/claude-voice"
readonly DEFAULT_CONFIG_FILE="${DEFAULT_CONFIG_DIR}/claude-voice.conf"
readonly FALLBACK_CONFIG_FILE="${PROJECT_ROOT}/src/config/claude-voice.conf"

VERBOSE=false
QUIET=false
CONFIG_LOADED=false

log_info() {
    if [[ "$QUIET" != "true" ]]; then
        echo "[INFO] $*" >&2
    fi
}

log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo "[VERBOSE] $*" >&2
    fi
}

log_error() {
    echo "[ERROR] $*" >&2
}

log_warning() {
    echo "[WARNING] $*" >&2
}

die() {
    log_error "$@"
    exit 1
}

show_help() {
    cat << EOF
${PROGRAM_NAME} - Voice-enabled interface for Claude Code CLI

USAGE:
    ${PROGRAM_NAME} [OPTIONS] [PROMPT]

OPTIONS:
    -h, --help      Show this help message
    -v, --version   Show version information
    -V, --verbose   Enable verbose output
    -q, --quiet     Suppress non-error output
    
MODES:
    Interactive:    ${PROGRAM_NAME}
                   Starts voice input session
                   
    Direct prompt:  ${PROGRAM_NAME} "your prompt here"
                   Processes single prompt and exits

EXAMPLES:
    ${PROGRAM_NAME}
        Start interactive voice session
        
    ${PROGRAM_NAME} "show me the current git status"
        Send direct prompt to Claude Code
        
    ${PROGRAM_NAME} --verbose
        Start with detailed logging enabled

CONFIGURATION:
    Configuration file: ${DEFAULT_CONFIG_FILE}
    
    Creates default config on first run if not found.
    
REQUIREMENTS:
    - macOS 10.15+ (for speech recognition)
    - Claude Code CLI installed and configured
    - Microphone access permission

For more information, visit: https://github.com/anthropics/claude-code
EOF
}

show_version() {
    echo "${PROGRAM_NAME} version ${VERSION}"
}

load_config() {
    if [[ "$CONFIG_LOADED" == "true" ]]; then
        return 0
    fi
    
    local config_file=""
    
    if [[ -f "$DEFAULT_CONFIG_FILE" ]]; then
        config_file="$DEFAULT_CONFIG_FILE"
        log_verbose "Loading user config from: $config_file"
    elif [[ -f "$FALLBACK_CONFIG_FILE" ]]; then
        config_file="$FALLBACK_CONFIG_FILE"
        log_verbose "Loading fallback config from: $config_file"
    else
        log_warning "No configuration file found. Using built-in defaults."
        set_default_config
        CONFIG_LOADED=true
        return 0
    fi
    
    if ! source "$config_file" 2>/dev/null; then
        log_error "Failed to load configuration from: $config_file"
        log_info "Using built-in defaults instead"
        set_default_config
    fi
    
    CONFIG_LOADED=true
    log_verbose "Configuration loaded successfully"
}

set_default_config() {
    TTS_VOICE="${TTS_VOICE:-Alex}"
    TTS_RATE="${TTS_RATE:-200}"
    TTS_VOLUME="${TTS_VOLUME:-0.7}"
    SPEECH_TIMEOUT="${SPEECH_TIMEOUT:-10}"
    MIN_CONFIDENCE="${MIN_CONFIDENCE:-0.7}"
    MAX_SPOKEN_LINES="${MAX_SPOKEN_LINES:-10}"
    SUMMARIZE_THRESHOLD="${SUMMARIZE_THRESHOLD:-50}"
    ENABLE_INTERRUPTION="${ENABLE_INTERRUPTION:-true}"
    GLOBAL_HOTKEY="${GLOBAL_HOTKEY:-cmd+shift+space}"
    SHOW_PROGRESS="${SHOW_PROGRESS:-true}"
    CLAUDE_TIMEOUT="${CLAUDE_TIMEOUT:-30}"
    
    log_verbose "Default configuration values set"
}

validate_dependencies() {
    log_verbose "Validating system dependencies..."
    
    if ! command -v claude &> /dev/null; then
        die "Claude Code CLI not found. Please install Claude Code CLI first." \
            "Visit: https://github.com/anthropics/claude-code for installation instructions."
    fi
    
    # Test Claude Code CLI functionality with a simple command
    local test_output
    test_output=$(claude --help 2>&1)
    local test_exit_code=$?
    
    if [[ $test_exit_code -ne 0 ]]; then
        if [[ "$test_output" =~ (authentication|auth|login|unauthorized) ]]; then
            die "Claude Code CLI is not authenticated." \
                "Run 'claude auth' to set up authentication."
        else
            die "Claude Code CLI is not working properly." \
                "Error: $test_output" \
                "Try running 'claude code --help' to diagnose the issue."
        fi
    fi
    
    if [[ "$(uname)" != "Darwin" ]]; then
        die "This tool requires macOS for speech recognition support."
    fi
    
    local macos_version
    macos_version=$(sw_vers -productVersion)
    local major_version="${macos_version%%.*}"
    
    if [[ "$major_version" -lt 10 ]] || [[ "$major_version" -eq 10 && "${macos_version#*.}" -lt 15 ]]; then
        die "macOS 10.15 or later is required for speech recognition support."
    fi
    
    # Check for AppleScript voice input file
    if [[ ! -f "${PROJECT_ROOT}/src/lib/voice-input.applescript" ]]; then
        die "Voice input AppleScript not found at: ${PROJECT_ROOT}/src/lib/voice-input.applescript"
    fi
    
    log_verbose "All dependencies validated successfully"
}

capture_voice_input() {
    local timeout="${SPEECH_TIMEOUT:-10}"
    local confidence="${MIN_CONFIDENCE:-0.7}"
    local max_retries="${MAX_RETRIES:-3}"
    
    log_verbose "Capturing voice input with timeout=$timeout, confidence=$confidence"
    
    local applescript_path="${PROJECT_ROOT}/src/lib/voice-input.applescript"
    local result
    
    # Call the AppleScript with parameters
    result=$(osascript "$applescript_path" "$timeout" "$confidence" "$max_retries" 2>/dev/null)
    local exit_code=$?
    
    if [[ $exit_code -ne 0 ]]; then
        log_error "Voice input AppleScript failed with exit code: $exit_code"
        return $exit_code
    fi
    
    # Parse the result
    if [[ "$result" =~ ^SUCCESS: ]]; then
        # Extract the text after "SUCCESS:"
        echo "${result#SUCCESS:}"
        return 0
    elif [[ "$result" =~ ^ERROR: ]]; then
        log_error "Voice input error: ${result#ERROR:}"
        return 1
    elif [[ "$result" =~ ^TIMEOUT ]]; then
        log_warning "Voice input timed out"
        return 124
    else
        log_error "Unexpected voice input result: $result"
        return 1
    fi
}

call_claude_code() {
    local prompt="$1"
    local timeout="${CLAUDE_TIMEOUT:-30}"
    
    log_verbose "Calling Claude Code CLI with timeout=${timeout}s"
    
    # Create temporary files for capturing output
    local stdout_file
    local stderr_file
    stdout_file=$(mktemp)
    stderr_file=$(mktemp)
    
    # Cleanup function
    cleanup_temp_files() {
        rm -f "${stdout_file:-}" "${stderr_file:-}" 2>/dev/null
    }
    trap cleanup_temp_files EXIT
    
    # Run Claude Code with timeout
    local claude_pid
    local exit_code
    
    # Start Claude Code in background
    (
        exec claude --print "$prompt" >"$stdout_file" 2>"$stderr_file"
    ) &
    claude_pid=$!
    
    # Wait with timeout
    local timeout_reached=false
    local completed=false
    
    for ((i=0; i<timeout; i++)); do
        if ! kill -0 "$claude_pid" 2>/dev/null; then
            # Process completed
            wait "$claude_pid"
            exit_code=$?
            completed=true
            break
        fi
        sleep 1
    done
    
    # Check if timeout was reached
    if [[ "$completed" != "true" ]] && kill -0 "$claude_pid" 2>/dev/null; then
        timeout_reached=true
        kill -TERM "$claude_pid" 2>/dev/null
        sleep 2
        kill -KILL "$claude_pid" 2>/dev/null
        exit_code=124
    fi
    
    # Read output files
    local stdout_content=""
    local stderr_content=""
    
    if [[ -f "$stdout_file" ]]; then
        stdout_content=$(<"$stdout_file")
    fi
    
    if [[ -f "$stderr_file" ]]; then
        stderr_content=$(<"$stderr_file")
    fi
    
    # Handle timeout
    if [[ "$timeout_reached" == "true" ]]; then
        log_error "Claude Code CLI timed out after ${timeout} seconds"
        echo "TIMEOUT_ERROR"
        return 124
    fi
    
    # Handle authentication errors
    if [[ "$stderr_content" =~ (authentication|auth|login|unauthorized|401) ]] || [[ $exit_code -eq 1 && "$stderr_content" =~ (not.*logged.*in|credential) ]]; then
        log_error "Authentication failure detected"
        echo "AUTH_ERROR:$stderr_content"
        return 2
    fi
    
    # Handle network errors
    if [[ "$stderr_content" =~ (network|connection|timeout|DNS|resolve|unreachable) ]] || [[ $exit_code -eq 1 && "$stderr_content" =~ (connect|network) ]]; then
        log_error "Network error detected"
        echo "NETWORK_ERROR:$stderr_content"
        return 3
    fi
    
    # Handle rate limiting
    if [[ "$stderr_content" =~ (rate.*limit|too.*many.*requests|429) ]]; then
        log_error "Rate limiting detected"
        echo "RATE_LIMIT_ERROR:$stderr_content"
        return 4
    fi
    
    # Handle general errors
    if [[ $exit_code -ne 0 ]]; then
        log_error "Claude Code CLI failed with exit code: $exit_code"
        if [[ -n "$stderr_content" ]]; then
            echo "GENERAL_ERROR:$stderr_content"
        else
            echo "GENERAL_ERROR:Unknown error occurred"
        fi
        return $exit_code
    fi
    
    # Success - return stdout content
    echo "$stdout_content"
    return 0
}

process_claude_prompt() {
    local prompt="$1"
    
    if [[ -z "$prompt" ]]; then
        log_error "No prompt provided"
        return 1
    fi
    
    log_verbose "Processing prompt with Claude Code: $prompt"
    
    # Show processing indicator
    if [[ "${SHOW_PROGRESS:-true}" == "true" ]]; then
        echo "🤖 Processing with Claude Code..."
    fi
    
    # Call Claude Code CLI with integrated error handling
    local claude_response
    claude_response=$(call_claude_code "$prompt")
    local claude_exit_code=$?
    
    # Handle different error types
    case $claude_exit_code in
        0)
            # Success
            echo "💬 Claude Code response:"
            echo "$claude_response"
            ;;
        2)
            # Authentication error
            local error_msg="${claude_response#AUTH_ERROR:}"
            echo "❌ Authentication Error:"
            echo "Claude Code CLI is not authenticated or session has expired."
            echo "Please run 'claude auth' to authenticate."
            if [[ -n "$error_msg" ]]; then
                log_verbose "Auth error details: $error_msg"
            fi
            return 2
            ;;
        3)
            # Network error
            local error_msg="${claude_response#NETWORK_ERROR:}"
            echo "❌ Network Error:"
            echo "Unable to connect to Claude Code service."
            echo "Please check your internet connection and try again."
            if [[ -n "$error_msg" ]]; then
                log_verbose "Network error details: $error_msg"
            fi
            return 3
            ;;
        4)
            # Rate limiting
            local error_msg="${claude_response#RATE_LIMIT_ERROR:}"
            echo "❌ Rate Limit Error:"
            echo "Too many requests. Please wait a moment and try again."
            if [[ -n "$error_msg" ]]; then
                log_verbose "Rate limit details: $error_msg"
            fi
            return 4
            ;;
        124)
            # Timeout
            echo "❌ Timeout Error:"
            echo "Claude Code CLI timed out after ${CLAUDE_TIMEOUT:-30} seconds."
            echo "The request may be too complex or the service may be slow."
            echo "Try a simpler prompt or try again later."
            return 124
            ;;
        *)
            # General error
            local error_msg="${claude_response#GENERAL_ERROR:}"
            echo "❌ Claude Code Error:"
            echo "$error_msg"
            log_error "Claude Code CLI failed with exit code: $claude_exit_code"
            return $claude_exit_code
            ;;
    esac
    
    # TODO: In Phase 2, add response processing and TTS
    # For now, just display the raw response
    
    return $claude_exit_code
}

create_default_config() {
    if [[ ! -f "$DEFAULT_CONFIG_FILE" ]]; then
        log_info "Creating default configuration file at: $DEFAULT_CONFIG_FILE"
        
        mkdir -p "$DEFAULT_CONFIG_DIR"
        
        cat > "$DEFAULT_CONFIG_FILE" << 'EOF'
# Claude Voice Configuration File

# Voice & Text-to-Speech Settings
TTS_VOICE="Alex"                    # macOS voice name
TTS_RATE="200"                      # Words per minute
TTS_VOLUME="0.7"                    # Volume level (0.0-1.0)

# Speech Recognition Settings
SPEECH_TIMEOUT="10"                 # Seconds to wait for speech
MIN_CONFIDENCE="0.7"                # Recognition confidence threshold

# Claude Code Integration
CLAUDE_TIMEOUT="30"                 # Claude Code CLI timeout in seconds

# Response Processing
MAX_SPOKEN_LINES="10"               # Lines before summarization
SUMMARIZE_THRESHOLD="50"            # Line count trigger for summaries
ENABLE_INTERRUPTION="true"          # Allow Ctrl+C to stop TTS

# Interface Settings
GLOBAL_HOTKEY="cmd+shift+space"     # Activation key combination
SHOW_PROGRESS="true"                # Display processing indicators
EOF
        
        chmod 600 "$DEFAULT_CONFIG_FILE"
        log_info "Default configuration created. Edit $DEFAULT_CONFIG_FILE to customize settings."
    fi
}

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -V|--verbose)
                VERBOSE=true
                shift
                ;;
            -q|--quiet)
                QUIET=true
                shift
                ;;
            -*)
                die "Unknown option: $1. Use --help for usage information."
                ;;
            *)
                DIRECT_PROMPT="$*"
                break
                ;;
        esac
    done
}

run_interactive_mode() {
    log_info "Starting Claude Voice interactive mode..."
    log_info "Press Ctrl+C to exit"
    
    echo "🎤 Claude Voice Interactive Mode"
    echo "Speak your prompt when ready, or type 'quit' to exit."
    echo
    
    while true; do
        echo -n "🎙️  Ready to listen... "
        
        # Capture voice input using AppleScript
        local voice_input
        voice_input=$(capture_voice_input)
        local voice_exit_code=$?
        
        # Handle voice input result
        if [[ $voice_exit_code -ne 0 ]]; then
            log_error "Voice input failed"
            echo "Press SPACE to try again, or type 'quit' to exit."
            read -n1 -s key
            if [[ "$key" == "q" ]]; then
                break
            fi
            continue
        fi
        
        # Check if user wants to quit
        if [[ "$voice_input" =~ ^(quit|exit|stop)$ ]]; then
            log_info "User requested exit"
            break
        fi
        
        echo "📝 Heard: \"$voice_input\""
        echo
        
        # Send to Claude Code and process response
        process_claude_prompt "$voice_input"
        
        echo
        echo "Ready for next prompt..."
        echo
    done
    
    log_info "Exiting interactive mode"
}

run_direct_prompt() {
    local prompt="$1"
    
    log_verbose "Processing direct prompt: $prompt"
    
    echo "🎯 Direct Prompt Mode"
    echo "Prompt: $prompt"
    echo
    
    # Process the prompt with Claude Code
    process_claude_prompt "$prompt"
    
    log_info "Direct prompt processing complete"
}

main() {
    DIRECT_PROMPT=""
    parse_arguments "$@"
    
    load_config
    create_default_config
    validate_dependencies
    
    if [[ -n "$DIRECT_PROMPT" ]]; then
        run_direct_prompt "$DIRECT_PROMPT"
    else
        run_interactive_mode
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi