#!/usr/bin/env bash

set -euo pipefail

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly PROJECT_ROOT="$(cd "${SCRIPT_DIR}/../.." && pwd)"
readonly VERSION="0.1.0"
readonly PROGRAM_NAME="claude-voice"

readonly DEFAULT_CONFIG_DIR="${HOME}/.config/claude-voice"
readonly DEFAULT_CONFIG_FILE="${DEFAULT_CONFIG_DIR}/claude-voice.conf"
readonly FALLBACK_CONFIG_FILE="${PROJECT_ROOT}/src/config/claude-voice.conf"

VERBOSE=false
QUIET=false
CONFIG_LOADED=false

log_info() {
    if [[ "$QUIET" != "true" ]]; then
        echo "[INFO] $*" >&2
    fi
}

log_verbose() {
    if [[ "$VERBOSE" == "true" ]]; then
        echo "[VERBOSE] $*" >&2
    fi
}

log_error() {
    echo "[ERROR] $*" >&2
}

log_warning() {
    echo "[WARNING] $*" >&2
}

die() {
    log_error "$@"
    exit 1
}

show_help() {
    cat << EOF
${PROGRAM_NAME} - Voice-enabled interface for Claude Code CLI

USAGE:
    ${PROGRAM_NAME} [OPTIONS] [PROMPT]

OPTIONS:
    -h, --help      Show this help message
    -v, --version   Show version information
    -V, --verbose   Enable verbose output
    -q, --quiet     Suppress non-error output
    
MODES:
    Interactive:    ${PROGRAM_NAME}
                   Starts voice input session
                   
    Direct prompt:  ${PROGRAM_NAME} "your prompt here"
                   Processes single prompt and exits

EXAMPLES:
    ${PROGRAM_NAME}
        Start interactive voice session
        
    ${PROGRAM_NAME} "show me the current git status"
        Send direct prompt to Claude Code
        
    ${PROGRAM_NAME} --verbose
        Start with detailed logging enabled

CONFIGURATION:
    Configuration file: ${DEFAULT_CONFIG_FILE}
    
    Creates default config on first run if not found.
    
REQUIREMENTS:
    - macOS 10.15+ (for speech recognition)
    - Claude Code CLI installed and configured
    - Microphone access permission

For more information, visit: https://github.com/anthropics/claude-code
EOF
}

show_version() {
    echo "${PROGRAM_NAME} version ${VERSION}"
}

load_config() {
    if [[ "$CONFIG_LOADED" == "true" ]]; then
        return 0
    fi
    
    local config_file=""
    
    if [[ -f "$DEFAULT_CONFIG_FILE" ]]; then
        config_file="$DEFAULT_CONFIG_FILE"
        log_verbose "Loading user config from: $config_file"
    elif [[ -f "$FALLBACK_CONFIG_FILE" ]]; then
        config_file="$FALLBACK_CONFIG_FILE"
        log_verbose "Loading fallback config from: $config_file"
    else
        log_warning "No configuration file found. Using built-in defaults."
        set_default_config
        CONFIG_LOADED=true
        return 0
    fi
    
    if ! source "$config_file" 2>/dev/null; then
        log_error "Failed to load configuration from: $config_file"
        log_info "Using built-in defaults instead"
        set_default_config
    fi
    
    CONFIG_LOADED=true
    log_verbose "Configuration loaded successfully"
}

set_default_config() {
    TTS_VOICE="${TTS_VOICE:-Alex}"
    TTS_RATE="${TTS_RATE:-200}"
    TTS_VOLUME="${TTS_VOLUME:-0.7}"
    SPEECH_TIMEOUT="${SPEECH_TIMEOUT:-10}"
    MIN_CONFIDENCE="${MIN_CONFIDENCE:-0.7}"
    MAX_SPOKEN_LINES="${MAX_SPOKEN_LINES:-10}"
    SUMMARIZE_THRESHOLD="${SUMMARIZE_THRESHOLD:-50}"
    ENABLE_INTERRUPTION="${ENABLE_INTERRUPTION:-true}"
    GLOBAL_HOTKEY="${GLOBAL_HOTKEY:-cmd+shift+space}"
    SHOW_PROGRESS="${SHOW_PROGRESS:-true}"
    
    log_verbose "Default configuration values set"
}

validate_dependencies() {
    log_verbose "Validating system dependencies..."
    
    if ! command -v claude &> /dev/null; then
        die "Claude Code CLI not found. Please install Claude Code CLI first." \
            "Visit: https://github.com/anthropics/claude-code for installation instructions."
    fi
    
    if ! claude --version &> /dev/null; then
        die "Claude Code CLI is not properly configured or authenticated." \
            "Run 'claude auth' to set up authentication."
    fi
    
    if [[ "$(uname)" != "Darwin" ]]; then
        die "This tool requires macOS for speech recognition support."
    fi
    
    local macos_version
    macos_version=$(sw_vers -productVersion)
    local major_version="${macos_version%%.*}"
    
    if [[ "$major_version" -lt 10 ]] || [[ "$major_version" -eq 10 && "${macos_version#*.}" -lt 15 ]]; then
        die "macOS 10.15 or later is required for speech recognition support."
    fi
    
    log_verbose "All dependencies validated successfully"
}

create_default_config() {
    if [[ ! -f "$DEFAULT_CONFIG_FILE" ]]; then
        log_info "Creating default configuration file at: $DEFAULT_CONFIG_FILE"
        
        mkdir -p "$DEFAULT_CONFIG_DIR"
        
        cat > "$DEFAULT_CONFIG_FILE" << 'EOF'
# Claude Voice Configuration File

# Voice & Text-to-Speech Settings
TTS_VOICE="Alex"                    # macOS voice name
TTS_RATE="200"                      # Words per minute
TTS_VOLUME="0.7"                    # Volume level (0.0-1.0)

# Speech Recognition Settings
SPEECH_TIMEOUT="10"                 # Seconds to wait for speech
MIN_CONFIDENCE="0.7"                # Recognition confidence threshold

# Response Processing
MAX_SPOKEN_LINES="10"               # Lines before summarization
SUMMARIZE_THRESHOLD="50"            # Line count trigger for summaries
ENABLE_INTERRUPTION="true"          # Allow Ctrl+C to stop TTS

# Interface Settings
GLOBAL_HOTKEY="cmd+shift+space"     # Activation key combination
SHOW_PROGRESS="true"                # Display processing indicators
EOF
        
        chmod 600 "$DEFAULT_CONFIG_FILE"
        log_info "Default configuration created. Edit $DEFAULT_CONFIG_FILE to customize settings."
    fi
}

parse_arguments() {
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -V|--verbose)
                VERBOSE=true
                shift
                ;;
            -q|--quiet)
                QUIET=true
                shift
                ;;
            -*)
                die "Unknown option: $1. Use --help for usage information."
                ;;
            *)
                DIRECT_PROMPT="$*"
                break
                ;;
        esac
    done
}

run_interactive_mode() {
    log_info "Starting Claude Voice interactive mode..."
    log_info "Press Ctrl+C to exit"
    
    echo "ðŸŽ¤ Claude Voice Interactive Mode"
    echo "Speak your prompt when ready, or type 'quit' to exit."
    echo
    
    while true; do
        echo -n "Ready to listen... "
        
        echo "TODO: Implement voice input capture"
        echo "TODO: Send to Claude Code CLI"
        echo "TODO: Process and speak response"
        
        echo
        read -p "Type 'quit' to exit: " input
        if [[ "$input" == "quit" ]]; then
            break
        fi
    done
    
    log_info "Exiting interactive mode"
}

run_direct_prompt() {
    local prompt="$1"
    
    log_verbose "Processing direct prompt: $prompt"
    
    echo "ðŸŽ¯ Direct Prompt Mode"
    echo "Prompt: $prompt"
    echo
    
    echo "TODO: Send prompt to Claude Code CLI"
    echo "TODO: Process and speak response"
    
    log_info "Direct prompt processing complete"
}

main() {
    DIRECT_PROMPT=""
    parse_arguments "$@"
    
    load_config
    create_default_config
    validate_dependencies
    
    if [[ -n "$DIRECT_PROMPT" ]]; then
        run_direct_prompt "$DIRECT_PROMPT"
    else
        run_interactive_mode
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi